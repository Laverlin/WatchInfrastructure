## Setup master node 
##
- name: Setup primero master node
  hosts: barolo, master
  become: true
  become_method: sudo
  become_user: root
  gather_facts: true
  tasks:

    ## Init Cluster
    ##
    - name: Create directory for kube config.
      ansible.builtin.file: 
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Create Cluster Certificate
      shell: "kubeadm certs certificate-key"  #  > /home/{{ ansible_user }}/kubernetes/cert_key"
      register:  certificate_key_output
      # args:
      #   creates: /home/{{ ansible_user }}/kubernetes/cert_key 
    
    # - name: extract certificate key
    #   command: "cat /home/{{ ansible_user }}/kubernetes/cert_key"
    #   register:  certificate_key_output

    - name: Create DEV/STAGE init config file
      copy:
        dest: /home/{{ ansible_user }}/.kube/init_config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          nodeRegistration:
            criSocket: "unix:///run/containerd/containerd.sock"
          certificateKey: {{ certificate_key_output.stdout }}

          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          networking:
            podSubnet: "10.244.0.0/16"
          controlPlaneEndpoint: "{{ public_ip }}:6443"
          apiServer:
            extraArgs:
              oidc-issuer-url: {{ common.oidc_issuer_url }}
              oidc-client-id: kubernetes
              oidc-username-claim: email
              oidc-username-prefix: 'oidc:'
              oidc-groups-claim: groups
              oidc-groups-prefix: 'oidc:'
              oidc-ca-file: {{ secret_vars.storage_root }}/persist/ssl/{{ envs.domain_name }}.full
            extraVolumes:
              - name: "ssl-cert"
                hostPath: "{{ secret_vars.storage_root }}/persist/ssl/"
                mountPath: "{{ secret_vars.storage_root }}/persist/ssl/"
                readOnly: true
                pathType: DirectoryOrCreate
            certSANs:
              - "{{ public_ip }}"
              - "{{ envs.domain_name }}"
      when: secret_vars.deploy_env != 'prod'

    - name: Create PROD init config file
      copy:
        dest: /home/{{ ansible_user }}/.kube/init_config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          nodeRegistration:
            criSocket: "unix:///run/containerd/containerd.sock"
          certificateKey: {{ certificate_key_output.stdout }}

          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          networking:
            podSubnet: "10.244.0.0/16"
          controlPlaneEndpoint: "{{ public_ip }}:6443"
          apiServer:
            extraArgs:
              oidc-issuer-url: {{ common.oidc_issuer_url }}
              oidc-client-id: kubernetes
              oidc-username-claim: email
              oidc-username-prefix: 'oidc:'
              oidc-groups-claim: groups
              oidc-groups-prefix: 'oidc:'
            certSANs:
              - "{{ public_ip }}"
              - "{{ envs.domain_name }}"
      when: secret_vars.deploy_env == 'prod'

    - name: Intilizing Kubernetes Cluster
      command: |
        kubeadm init \
        --config=/home/{{ ansible_user }}/.kube/init_config.yaml \
        --upload-certs \
        --ignore-preflight-errors=NumCPU
      args:
        creates: /etc/kubernetes/manifests/kube-apiserver.yaml

    # - name: Intilizing Kubernetes Cluster
    #   command: |
    #     kubeadm init \
    #     --control-plane-endpoint={{ public_ip }} \
    #     --pod-network-cidr=10.244.0.0/16 \
    #     --cri-socket=unix:///run/containerd/containerd.sock \
    #     --apiserver-cert-extra-sans={{ secret_vars.namecom_fqn }} \
    #     --certificate-key={{ certificate_key_output.stdout }} \
    #     --upload-certs
    #   args:
    #     creates: /etc/kubernetes/manifests/kube-apiserver.yaml

    - name: Copy /etc/kubernetes/admin.conf to user home directory /home/{{ ansible_user }}/.kube/config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Remove the cache directory.
      ansible.builtin.file: 
        path: /home/{{ ansible_user }}/.kube/cache
        state: absent

    - name: Copy kube config to localhost
      ansible.builtin.fetch:
        src: /home/{{ ansible_user }}/.kube/config
        dest: ~/remote-kube/{{ ansible_host }}/
        flat: yes

    - name: get host name
      shell: "hostname"
      register: host_name 

    - name: Set master node label
      become: false
      shell: "kubectl label nodes {{ host_name.stdout }} node-role=master"

    ## install kube network
    ##
    - name: Create Pod Network & RBAC.
      become: false
      ansible.builtin.command: |
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml 

    - name: Get the token for joining the nodes with Kuberentes master.
      shell: "kubeadm token create  --print-join-command"
      register: kubernetes_join_command

    - name: Add join command to dummy host
      add_host:
        name:   "K8S_JOIN_HOLDER"
        join_command: "{{kubernetes_join_command.stdout_lines[0]}}"
        #join_command: "{{kubernetes_join_command.stdout_lines[0]}} --control-plane --certificate-key {{certificate_key_output.stdout}}"


    - debug:
        msg: "{{ hostvars['K8S_JOIN_HOLDER']['join_command'] }}"