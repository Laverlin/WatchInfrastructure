apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "otel-collector.fullname" . }}
  labels:
    {{- include "otel-collector.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
data:
  allow-snippet-annotations: "false"
  config.yaml: |
    # Configure receivers
    # We only need otlp protocol on grpc, but you can use http, zipkin, jaeger, aws, etc.
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver
    receivers:
      zipkin:
        endpoint: "0.0.0.0:{{ .Values.ports.sipkinReceiver }}"
      otlp:
        protocols:
          grpc:

    # Configure exporters
    exporters:
      # Export prometheus endpoint
      prometheus:
        endpoint: "0.0.0.0:{{ .Values.ports.prometheusExporter }}"

      # log to the console
      logging:

      # Export to a file
      file:
        path: /etc/output/logs.json

      otlp:
        endpoint: {{ .Values.tempo.server }}:{{ .Values.tempo.port }}
        tls:
          insecure: true


    # Configure processors (batch, sampling, filtering, hashing sensitive data, etc.)
    # https://opentelemetry.io/docs/collector/configuration/#processors
    processors:
      batch:

    # Configure pipelines. Pipeline defines a path the data follows in the Collector
    # starting from reception, then further processing or modification and finally
    # exiting the Collector via exporters.
    # https://opentelemetry.io/docs/collector/configuration/#service
    # https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/design.md#pipelines
    service:
      pipelines:
        traces:
          receivers: [otlp, zipkin]
          processors: [batch]
          exporters: [logging, otlp]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [logging, prometheus]
        logs:
          receivers: [otlp]
          processors: []
          exporters: [logging]