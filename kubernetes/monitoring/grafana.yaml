# Grafana pod deployment
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          imagePullPolicy: 'IfNotPresent'
          env:
            - name: DOMAIN_NAME
              valueFrom:
                configMapKeyRef:
                  name: variables
                  key: domain_name
            - name: GF_DATABASE_TYPE
              value: "postgres"
            - name: GF_DATABASE_HOST
              value: "pg-server.watch-backend:5432"
            - name: GF_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: secret-data
                  key: PG_USER
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret-data
                  key: PG_PASS  

            - name: GF_INSTALL_PLUGINS
              value: "grafana-worldmap-panel"
            # - name: GF_AUTH_ANONYMOUS_ENABLED
            #   value: "true"
            # - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            #   value: "Admin"
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
            - name: GF_AUTH_OAUTH_AUTO_LOGIN
              value: "true"
            - name: GF_SERVER_DOMAIN
              value: "$(DOMAIN_NAME)"
            - name: GF_SERVER_ROOT_URL
              value: "https://$(DOMAIN_NAME)/dashboard/grafana/"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_ENABLED
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_NAME
              value: "Keycloak"
            - name: GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
              value: "grafana"
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: variables
                  key: gf_keycloak_client_secret
            - name: GF_AUTH_GENERIC_OAUTH_SCOPES
              value: "profile"
            - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
              value: "https://sso.$(DOMAIN_NAME)/realms/dashboard/protocol/openid-connect/auth"
            - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
              value: "https://sso.$(DOMAIN_NAME)/realms/dashboard/protocol/openid-connect/token"
            - name: GF_AUTH_GENERIC_OAUTH_API_URL
              value: "https://sso.$(DOMAIN_NAME)/realms/dashboard/protocol/openid-connect/userinfo"
            - name: GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
              value: "realm_access.roles[?contains(@, 'admin')] && 'Admin' || 'Admin'"

            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: secret-data
                  key: PG_USER
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: secret-data
                  key: PG_PASS
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana
            - name: grafana-data
              mountPath: /var/lib/grafana
          securityContext:
            runAsUser: 0
            privileged: true
          resources:
            requests:
               memory: "200Mi"

      initContainers:
        - name: wait-postrges
          image: postgres:alpine
          command: ['sh', '-c', "until pg_isready -h pg-server.watch-backend -p 5432; do  echo waiting for pg-server.watch-backend; sleep 5; done"]

      volumes:
        - name: grafana-config
          hostPath:
            path: /shared-data/configs/grafana
            type: Directory
        - name: grafana-data
          hostPath:
            path: /shared-data/persist/grafana
            type: DirectoryOrCreate
---

# service
#
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30300
      name: grafana-port
  type: NodePort
